trigger: 
  - main

variables:
  System.Debug: true

jobs:
  - job: generateInput
    steps:
      - task: PowerShell@2
        name: GenerateMatrix
        inputs:
          targetType: 'inline'
          script: |
            $subscriptions = Import-Csv "$(System.DefaultWorkingDirectory)/.azdo/subscriptionIds.csv"
            $matrixItems = $($subscriptions | ForEach-Object { "'$($_.SubscriptionName)': { 'subscriptionId': '$($_.SubscriptionId)' }," })
            $matrix = "{ " + "$matrixItems" + " }"
            Write-Host "##vso[task.setvariable variable=matrix;isOutput=true]$matrix"
  - job: runTerraform
    dependsOn: generateInput
    strategy:
      matrix: $[ dependencies.generateInput.outputs['GenerateMatrix.matrix'] ]
    steps:
      - task: TerraformInstaller@1
        displayName: install terraform
        inputs:
          terraformVersion: latest
      - task: TerraformTaskV4@4
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'rg-terraform'
          backendAzureRmResourceGroupName: 'rg-terraform'
          backendAzureRmStorageAccountName: 'saterraformrjb'
          backendAzureRmContainerName: 'azdo-yaml-loop-terraform'
          backendAzureRmKey: 'state.tfstate'
      - task: TerraformTaskV4@4
        displayName: 'terraform plan'
        inputs:
          provider: 'azurerm'
          command: plan
          workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
          commandOptions: '-var="subscription_id=$(subscriptionId)" -out=main.tfplan'
          environmentServiceNameAzureRM:  'rg-terraform'
      - task: TerraformTaskV4@4
        displayName: 'terraform apply'
        inputs:
          provider: 'azurerm'
          command: apply
          workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
          commandOptions: '-var="subscription_id=$(subscriptionId)" main.tfplan'
          environmentServiceNameAzureRM:  'rg-terraform'
