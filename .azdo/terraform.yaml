parameters:
- name: serviceConnectionName
  type: string
  default: ''
- name: tenantId
  type: string
  default: ''
- name: subscriptionId
  type: string
  default: ''

steps:
- pwsh: (gci  env:* | sort-object name)
- task: TerraformInstaller@1
  displayName: install terraform
  inputs:
    terraformVersion: latest
- task: TerraformTaskV4@4
  displayName: Initialize Terraform
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: ${{ parameters.serviceConnectionName }}
    backendAzureRmResourceGroupName: 'rg-terraform'
    backendAzureRmStorageAccountName: 'saterraformrjb'
    backendAzureRmContainerName: 'azdo-yaml-loop-terraform'
    backendAzureRmKey: 'state.tfstate'
    commandOptions: '-backend-config="tenant_id=${{ parameters.tenantId }}"'
- task: TerraformTaskV4@4
  displayName: 'terraform plan'
  inputs:
    provider: 'azurerm'
    command: plan
    workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
    commandOptions: '-var="subscription_id=${{ parameters.subscriptionId }}" -out=main.tfplan'
    environmentServiceNameAzureRM: ${{ parameters.serviceConnectionName }}
- task: TerraformTaskV4@4
  displayName: 'terraform apply'
  inputs:
    provider: 'azurerm'
    command: apply
    workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
    commandOptions: 'main.tfplan'
    environmentServiceNameAzureRM: ${{ parameters.serviceConnectionName }}